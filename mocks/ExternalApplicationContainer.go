// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import reflect "github.com/omniql/reflect"

// ExternalApplicationContainer is an autogenerated mock type for the ExternalApplicationContainer type
type ExternalApplicationContainer struct {
	mock.Mock
}

// Alias provides a mock function with given fields:
func (_m *ExternalApplicationContainer) Alias() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *ExternalApplicationContainer) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UsedResource provides a mock function with given fields: pos
func (_m *ExternalApplicationContainer) UsedResource(pos int) reflect.ExternalResourceContainer {
	ret := _m.Called(pos)

	var r0 reflect.ExternalResourceContainer
	if rf, ok := ret.Get(0).(func(int) reflect.ExternalResourceContainer); ok {
		r0 = rf(pos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.ExternalResourceContainer)
		}
	}

	return r0
}

// UsedResourcesCount provides a mock function with given fields:
func (_m *ExternalApplicationContainer) UsedResourcesCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *ExternalApplicationContainer) Version() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
