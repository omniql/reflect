// Code generated by mockery v1.0.0
package mocks

import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import reflect "github.com/omniql/reflect"

// LookupFields is an autogenerated mock type for the LookupFields type
type LookupFields struct {
	mock.Mock
}

// ByName provides a mock function with given fields: fieldName
func (_m *LookupFields) ByName(fieldName string) (reflect.FieldContainer, bool) {
	ret := _m.Called(fieldName)

	var r0 reflect.FieldContainer
	if rf, ok := ret.Get(0).(func(string) reflect.FieldContainer); ok {
		r0 = rf(fieldName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.FieldContainer)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(fieldName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ByPosition provides a mock function with given fields: fn
func (_m *LookupFields) ByPosition(fn hybrids.FieldNumber) (reflect.FieldContainer, bool) {
	ret := _m.Called(fn)

	var r0 reflect.FieldContainer
	if rf, ok := ret.Get(0).(func(hybrids.FieldNumber) reflect.FieldContainer); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.FieldContainer)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(hybrids.FieldNumber) bool); ok {
		r1 = rf(fn)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
