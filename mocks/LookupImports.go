// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import reflect "github.com/omniql/reflect"

// LookupImports is an autogenerated mock type for the LookupImports type
type LookupImports struct {
	mock.Mock
}

// ImportByAlias provides a mock function with given fields: alias
func (_m *LookupImports) ImportByAlias(alias string) (reflect.ExternalApplicationContainer, bool) {
	ret := _m.Called(alias)

	var r0 reflect.ExternalApplicationContainer
	if rf, ok := ret.Get(0).(func(string) reflect.ExternalApplicationContainer); ok {
		r0 = rf(alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.ExternalApplicationContainer)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(alias)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ImportByPosition provides a mock function with given fields: position
func (_m *LookupImports) ImportByPosition(position uint16) (reflect.ExternalApplicationContainer, bool) {
	ret := _m.Called(position)

	var r0 reflect.ExternalApplicationContainer
	if rf, ok := ret.Get(0).(func(uint16) reflect.ExternalApplicationContainer); ok {
		r0 = rf(position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.ExternalApplicationContainer)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(uint16) bool); ok {
		r1 = rf(position)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ImportsCount provides a mock function with given fields:
func (_m *LookupImports) ImportsCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
