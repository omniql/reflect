// Code generated by mockery v1.0.0
package mocks

import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import reflect "github.com/omniql/reflect"

// LookupTableOnUnion is an autogenerated mock type for the LookupTableOnUnion type
type LookupTableOnUnion struct {
	mock.Mock
}

// ByName provides a mock function with given fields: input
func (_m *LookupTableOnUnion) ByName(input string) (hybrids.UnionKind, reflect.TableContainer, bool) {
	ret := _m.Called(input)

	var r0 hybrids.UnionKind
	if rf, ok := ret.Get(0).(func(string) hybrids.UnionKind); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(hybrids.UnionKind)
	}

	var r1 reflect.TableContainer
	if rf, ok := ret.Get(1).(func(string) reflect.TableContainer); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(reflect.TableContainer)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// ByPosition provides a mock function with given fields: position
func (_m *LookupTableOnUnion) ByPosition(position hybrids.UnionKind) (reflect.TableContainer, bool) {
	ret := _m.Called(position)

	var r0 reflect.TableContainer
	if rf, ok := ret.Get(0).(func(hybrids.UnionKind) reflect.TableContainer); ok {
		r0 = rf(position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.TableContainer)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(hybrids.UnionKind) bool); ok {
		r1 = rf(position)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
